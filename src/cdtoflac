#!/bin/sh
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

###################
# Defaults
###################

readonly D_DEVICE="/dev/cdrom" # Device path to the CD-ROM drive
readonly D_EJECT=0             # Whether to eject the CD when done
readonly D_KEEP=0              # Whether to keep the original WAV files
readonly D_OUTPUT="."          # Path to the output directory
readonly D_PARALLEL=5          # Maximum number of parallel encodes

###################
# Functions
###################

# die(STATUS, MESSAGE)
# Prints MESSAGE to stderr and exits with the error code STATUS.
die() {
  # Validate function arguments
  if [ $# -ne 2 ]; then
    die 200 "Invalid number of arguments to die()"
  fi

  if ! is_int "$1"; then
    die 200 "First argument of die() must be an integer. '$1' given"
  fi

  # Print message and exit
  echo >&2 "$(me): $2"
  exit "$1"
}

# is_int(NUM)
# Returns true if NUM is an integer
is_int() {
  [ "$1" -eq "$1" ] 2>/dev/null
}

# me()
# Prints the basename of this script.
me() {
  basename "$0"
}

# usage()
# Prints the command usage to stdout.
usage() {
  cat <<EOF
$(version): Music CD digitization tool based on cdparanoia.

Rips all the tracks from a CD and losslessly encodes them as FLACs.

Note: This script must be run with root privileges.

Usage: $(me) [OPTIONS]

    -C, --chown  USER[:GROUP]  Change the owner and group of the output files after the encoding is finished.
    -e, --eject                Eject the CD when finished.
    -d, --device DEVICE        Use DEVICE as the CD-ROM drive. Default: ${D_DEVICE}.
    -h, --help                 Show help and quit.
    -k, --keep                 Keep WAV files after encoding to FLAC.
    -o, --output DIR           Output the tracks to DIR. Defaults to the current working directory.
    -P, --parallel NUM         Do up to NUM parallel FLAC encodes. Default: ${D_PARALLEL}.
    -V, --version              Show version and quit.

EOF
}

# version()
# Prints the current program version to stdout.
version() {
  echo "$(me) v0.3.0"
}

###################
# Main
###################

# Convert long arguments into short forms
for arg in "$@"; do
  case "$arg" in
  --chown) set -- "$@" "-C" ;;
  --eject) set -- "$@" "-e" ;;
  --device) set -- "$@" "-d" ;;
  --help) set -- "$@" "-h" ;;
  --output) set -- "$@" "-o" ;;
  --keep) set -- "$@" "-k" ;;
  --parallel) set -- "$@" "-P" ;;
  --version) set -- "$@" "-V" ;;
  *) set -- "$@" "$arg" ;;
  esac

  shift
done

# Process short arguments
while getopts ":C:ed:ho:kP:V" opt; do
  case $opt in
  C) chown="$OPTARG" ;;
  e) eject=1 ;;
  d) device="$OPTARG" ;;
  h)
    usage
    exit 0
    ;;
  o) output="$OPTARG" ;;
  k) keep=1 ;;
  P) parallel="$OPTARG" ;;
  V)
    version
    exit 0
    ;;
  *)
    die 1 "Invalid option"
    ;;
  esac
done

# Shift arguments that were already handled by getopts
shift $((OPTIND - 1))

# Fallback to defaults for unset arguments
if [ -z ${eject+x} ]; then eject=$D_EJECT; fi
if [ -z ${device+x} ]; then device=$D_DEVICE; fi
if [ -z ${output+x} ]; then output=$D_OUTPUT; fi
if [ -z ${keep+x} ]; then keep=$D_KEEP; fi
if [ -z ${parallel+x} ]; then parallel=$D_PARALLEL; fi

# Ensure dependencies are found
while IFS= read -r dependency; do
  command -v "$dependency" >/dev/null 2>&1 || die 2 "Dependency '$dependency' not found in \$PATH"
done <<EOF
cdparanoia
flac
EOF

# Validate program arguments
if ! is_int "$parallel"; then
  die 1 "Argument of -p or --parallel option must be an integer. '$parallel' given"
fi

# Ensure script is run as root
if [ "$(id -u)" -ne 0 ]; then
  die 1 "Must be run as root"
fi

# Change to output directory
if [ ! -d "$output" ]; then
  mkdir -p "$output"

  if [ -n "$chown" ]; then
    chown "$chown" "$output"
  fi
fi

cd "$output" || die 200 "Could not change into output directory '$output'"

# Rip CD using cdparanoia
cdparanoia -XB -d "$device" || die $((100 + $?)) "Error while ripping CD with cdparanoia"

# Start encoding in parallel processes
find . -name "*.wav" -print0 | xargs -0 -P $parallel flac || die $((100 + $?)) "Error while encoding tracks with flac"

# Change the file owners and groups
if [ -n "$chown" ]; then
  chown "$chown" ./*.wav ./*.flac
fi

# Remove source WAV files
if [ $keep -eq 0 ]; then
  rm ./*.wav
fi

# Eject CD
if [ $eject -eq 1 ]; then
  eject "$device"
fi
